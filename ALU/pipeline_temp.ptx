/*
** Author(s)      :  Yehia Arafa (yarafa@nmsu.edu)
** 
** File           :  pipeline_temp.ptx  
** 
** Description    :  Instructions latencies microbenchmark
** 
** Paper          :  Y. Arafa et al., "Low Overhead Instruction Latency Characterization
**                                     for NVIDIA GPGPUs," HPEC'19                                                  
*/

//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_70 /* --> NEED TO BE CHANGED WITH THE SM ARCH */
.address_size 64


//--------------------------Ovhd--------------------------//
 
    // .globl	_Z4OvhdPi

.visible .entry _Z4OvhdPi(
    .param .u64 _Z4OvhdPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4OvhdPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    mov.u32         %r1, %clock;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;

    ret;
}

//-----------------------Nop-----------------------//
 
        // .globl	_Z3NopPi
.visible .entry _Z3NopPi(
        .param .u64 _Z3NopPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3NopPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32         %r1, %clock;
    bar.warp.sync   -1;
    bar.warp.sync   -1;
    bar.warp.sync   -1;
    bar.warp.sync   -1;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;

    ret;
}


//-----------------------BarSync-----------------------//
 
        // .globl	_Z7BarSyncPi
.visible .entry _Z7BarSyncPi(
        .param .u64 _Z7BarSyncPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z7BarSyncPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32         %r1, %clock;
    bar.sync   0;
    bar.sync   0;
    bar.sync   0;
    bar.sync   0;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;

    ret;
}


//--------------------------MovSpec--------------------------//
 
        // .globl	_Z7MovSpecPi
.visible .entry _Z7MovSpecPi(
        .param .u64 _Z7MovSpecPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z7MovSpecPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32         %r1, %clock;
    mov.u32         %r11, %tid.x;
    bar.warp.sync        1;
    mov.u32         %r12, %tid.y;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 2, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------Mov--------------------------//
 
        // .globl	_Z3MovPi
.visible .entry _Z3MovPi(
        .param .u64 _Z3MovPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3MovPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32         %r1, %clock;
    mov.u32         %r11, 7;
    mov.u32         %r12, 4;
    mov.u32         %r13, 5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;
    st.global.u32   [%rd4 + 20], %r13;

    ret;
}


//--------------------------Cvt--------------------------//
 
        // .globl	_Z3CvtPi
.visible .entry _Z3CvtPi(
        .param .u64 _Z3CvtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z3CvtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    cvt.rn.f32.s32   %f3, %r3;
    
    add.f32          %f5, 5.0, %f3;
    add.f32          %f7, 2.0, %f5;
    add.f32          %f9, 4.0, %f7;
    
    mov.u32           %r1, %clock;
    cvt.rzi.s32.f32   %r5, %f5;
    cvt.rzi.s32.f32   %r7, %f7;
    cvt.rzi.s32.f32   %r9, %f9;
    mov.u32           %r2, %clock;
    sub.s32           %r8, %r2, %r1;
    
    add.u32           %r10, 2, %r1;

    st.global.u32     [%rd4], %r8;
    st.global.u32     [%rd4 + 4], %r10;
    st.global.u32     [%rd4 + 8], %r5;
    st.global.u32     [%rd4 + 12], %r7;
    st.global.u32     [%rd4 + 16], %r9;

    ret;
}


//--------------------------Add--------------------------//
 
        // .globl	_Z3AddPi
.visible .entry _Z3AddPi(
        .param .u64 _Z3AddPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3AddPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    add.u32         %r11, 6, %r7;
    add.u32         %r12, %r5, 7;
    add.u32         %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;
    st.global.u32   [%rd4 + 20], %r13;

    ret;
}


//--------------------------Mul--------------------------//

        // .globl	_Z3MulPi
.visible .entry _Z3MulPi(
        .param .u64 _Z3MulPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3MulPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    mul.lo.u32      %r11, 6, %r7;
    mul.lo.u32      %r12, %r5, 7;
    mul.lo.u32      %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;
    st.global.u32   [%rd4 + 20], %r13;

    ret;
}


//--------------------------Div--------------------------//

        // .globl	_Z3DivPi
.visible .entry _Z3DivPi(
        .param .u64 _Z3DivPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3DivPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 48, 2;
    add.s32         %r7, 10, %r5;

    mov.u32         %r1, %clock;
    div.s32         %r11, 2, %r7;
    div.s32         %r12, 6, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------DivU--------------------------//

        // .globl	_Z4DivUPi
.visible .entry _Z4DivUPi(
        .param .u64 _Z4DivUPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4DivUPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 48, 2;
    add.s32         %r7, 10, %r5;

    mov.u32         %r1, %clock;
    div.u32         %r11, 2, %r7;
    div.u32         %r12, 6, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------Rem--------------------------//

        // .globl	_Z3RemPi
.visible .entry _Z3RemPi(
        .param .u64 _Z3RemPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3RemPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 48, 2;
    add.s32         %r7, 10, %r5;

    mov.u32         %r1, %clock;
    rem.s32         %r11, 2, %r7;
    rem.s32         %r12, 6, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------RemU--------------------------//

        // .globl	_Z4RemUPi
.visible .entry _Z4RemUPi(
        .param .u64 _Z4RemUPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4RemUPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 48, 2;
    add.s32         %r7, 10, %r5;

    mov.u32         %r1, %clock;
    rem.u32         %r11, 2, %r7;
    rem.u32         %r12, 6, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}

//--------------------------Mul24Lo--------------------------//

        // .globl	_Z7Mul24LoPi
.visible .entry _Z7Mul24LoPi(
        .param .u64 _Z7Mul24LoPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z7Mul24LoPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    mul24.lo.u32    %r11, 6, %r7;
    mul24.lo.u32    %r12, %r5, 7;
    mul24.lo.u32    %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------Mul24Hi--------------------------//

        // .globl	_Z7Mul24HiPi
.visible .entry _Z7Mul24HiPi(
        .param .u64 _Z7Mul24HiPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z7Mul24HiPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    mul24.hi.u32    %r11, 6, %r7;
    mul24.hi.u32    %r12, %r5, 7;
    //mul24.hi.u32    %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------Popc--------------------------//
 
        // .globl	_Z4PopcPi
.visible .entry _Z4PopcPi(
        .param .u64 _Z4PopcPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4PopcPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r1;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    popc.b32        %r11, %r7;
    popc.b32        %r12, %r5;
    popc.b32        %r13, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;
    st.global.u32   [%rd4 + 20], %r13;

    ret;
}


//--------------------------Sad--------------------------//
 
        // .globl	_Z3SadPi
.visible .entry _Z3SadPi(
        .param .u64 _Z3SadPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3SadPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    

    add.s32         %r5, %r3, 2;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    sad.u32         %r11, 6, %r7, %r5;
    sad.u32         %r12, %r5, 7, %r7;
    sad.u32         %r13, %r2, 7, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;
    
    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------Clz--------------------------//
 
        // .globl	_Z3ClzPi
.visible .entry _Z3ClzPi(
        .param .u64 _Z3ClzPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3ClzPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    mov.u32         %r10, %tid.x;
    add.s32         %r5, 5, %r10;
    add.s32         %r7, %r5, 2;
    
    mov.u32         %r1, %clock;
    clz.b32         %r11, %r7;
    clz.b32         %r12, %r1;
    clz.b32         %r13, %r10;
    clz.b32         %r14, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;
    
    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------Bfind--------------------------//
 
        // .globl	_Z5BfindPi
.visible .entry _Z5BfindPi(
        .param .u64 _Z5BfindPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z5BfindPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    

    add.s32         %r5, %r3, 2;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    bfind.u32       %r11, %r7;
    bfind.u32       %r12, %r5;
    bfind.u32       %r13, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;
    st.global.u32   [%rd4 + 20], %r13;

    ret;
}


//--------------------------Brev--------------------------//
 
        // .globl	_Z4BrevPi
.visible .entry _Z4BrevPi(
        .param .u64 _Z4BrevPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4BrevPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    

    add.s32         %r5, %r3, 2;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    brev.b32        %r11, %r7;
    brev.b32        %r12, %r5;
    brev.b32        %r13, %r1;
    brev.b32        %r14, %r11;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 12], %r11;
    st.global.u32   [%rd4 + 16], %r12;

    ret;
}


//--------------------------Bfe--------------------------//
 
        // .globl	_Z3BfePi
.visible .entry _Z3BfePi(
        .param .u64 _Z3BfePi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3BfePi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 48, 2;
    add.s32         %r7, 10, %r5;

    mov.u32         %r1, %clock;
    bfe.u32         %r11, 2, %r7, %r1;
    bfe.u32         %r12, 6, %r5, %r1;
    bfe.u32         %r13, 6, %r11, %r1;
    bfe.u32         %r14, 6, %r12, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;
    st.global.u32   [%rd4 + 20], %r14;

    ret;
}


//--------------------------And--------------------------//
 
        // .globl	_Z3AndPi
.visible .entry _Z3AndPi(
        .param .u64 _Z3AndPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z3AndPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    and.b32         %r11, 6, %r7;
    and.b32         %r12, %r5, 7;
    and.b32         %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------Cnot--------------------------//
 
        // .globl	_Z4CnotPi
.visible .entry _Z4CnotPi(
        .param .u64 _Z4CnotPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z4CnotPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    cnot.b32        %r11, %r7;
    cnot.b32        %r12, %r5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;
 
    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;

    ret;
}


//--------------------------MAddc--------------------------//
 
        // .globl	_Z5MAddcPi
.visible .entry _Z5MAddcPi(
        .param .u64 _Z5MAddcPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;

    ld.param.u64    %rd1, [_Z5MAddcPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.s32         %r5, 5, %r3;
    add.s32         %r7, %r5, 2;

    mov.u32         %r1, %clock;
    addc.u32        %r11, 6, %r7;
    addc.u32        %r12, %r5, 7;
    addc.u32        %r13, 5, %r1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    st.global.u32   [%rd4 + 12], %r12;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------Setp--------------------------//
 
        // .globl	_Z4SetpPi
.visible .entry _Z4SetpPi(
        .param .u64 _Z4SetpPi_param_0
){
    .reg .b32   %r<100>;
    .reg .b64   %rd<27>;
    .reg .pred 	%p<2>;

    ld.param.u64 	%rd1, [_Z4SetpPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    st.global.u32     [%rd4 + 12], 0;
    mov.u32 	      %r3, 3;
    mov.u32 	      %r4, 4;
    mov.u32 	      %r80, 0;
    mov.u32 	      %r79, -10000;
    
BB0_1:

    add.u32         %r7, %r3, %r4; 
    ld.global.u32   %r9, [%rd4 + 12];
    add.u32         %r10, %r9, %r7; 
    st.global.u32   [%rd4 + 12], %r10;

    add.s32 	    %r79, %r79, 1;

    //=======================================
    mov.u32         %r1, %clock;
    setp.ne.s32	    %p1, %r79, 0;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;
    add.s32 	    %r80, %r80, %r6;
    //=======================================

    @%p1 bra 	    BB0_1;

    st.global.u32   [%rd4], %r80;
    st.global.u32   [%rd4 + 4], %r79;

    ret;
}


//--------------------------FAdd--------------------------//
 
        // .globl	_Z4FAddPi
.visible .entry _Z4FAddPi(
        .param .u64 _Z4FAddPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z4FAddPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32         %r1, %clock;
    add.f32         %f11, 6.0, %f7;
    add.f32         %f12, %f5, 7.0;
    add.f32         %f13, 5.0, %f1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------FMul--------------------------//
 
        // .globl	_Z4FMulPi
.visible .entry _Z4FMulPi(
        .param .u64 _Z4FMulPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z4FMulPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32         %r1, %clock;
    mul.rn.f32      %f11, 6.0, %f7;
    mul.rn.f32      %f12, %f5, 7.0;
    mul.rn.f32      %f13, 5.0, %f1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------FFMa--------------------------//
 
        // .globl	_Z4FFMaPi
.visible .entry _Z4FFMaPi(
        .param .u64 _Z4FFMaPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z4FFMaPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32         %r1, %clock;
    fma.rn.f32      %f11, 6.0, %f7, %f5;
    fma.rn.f32      %f12, %f5, 7.0, %f11;
    fma.rn.f32      %f13, 5.0, %f1, %f7;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------FDiv--------------------------//
 
        // .globl	_Z4FDivPi
.visible .entry _Z4FDivPi(
        .param .u64 _Z4FDivPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z4FDivPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 48.0, 2.0;
    add.f32         %f7, 10.0, %f5;

    mov.u32         %r1, %clock;
    div.rn.f32      %f11, 2.0, %f7;
    div.rn.f32      %f12, 6.0, %f5;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 4], %r7;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;
   
    ret;
}


//--------------------------DFAdd--------------------------//
 
        // .globl	_Z5DFAddPi
.visible .entry _Z5DFAddPi(
        .param .u64 _Z5DFAddPi_param_0
)
{  
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;


    ld.param.u64    %rd1, [_Z5DFAddPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, %fd14, %fd13;
    add.f64         %fd17, %fd15, 10.0;

    mov.u32         %r1, %clock;
    add.rn.f64      %fd19, %fd17, %fd13;
    add.rn.f64      %fd20, %fd19, %fd13;
    //add.rn.f64      %fd21, %fd20, %fd17;
    //add.rn.f64      %fd22, %fd21, %fd15;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r9, %fd20;
    st.global.u32   [%rd4 + 8], %r9;
  
    ret;
}

//--------------------------DFMul--------------------------//
 
        // .globl	_Z5DFMulPi
.visible .entry _Z5DFMulPi(
        .param .u64 _Z5DFMulPi_param_0
)
{ 
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z5DFMulPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, %fd14, %fd13;
    add.f64         %fd17, %fd15, 10.0;

    mov.u32         %r1, %clock;
    mul.rn.f64      %fd19, %fd17, %fd13;
    mul.rn.f64      %fd20, %fd19, %fd13;
    //mul.rn.f64      %fd21, %fd20, %fd17;
    //mul.rn.f64      %fd22, %fd21, %fd15;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;
    
    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r9, %fd20;
    st.global.u32   [%rd4 + 8], %r9;

    ret;
}


//--------------------------DFFMA--------------------------//
 
        // .globl	_Z5DFFMAPi
.visible .entry _Z5DFFMAPi(
        .param .u64 _Z5DFFMAPi_param_0
)
{ 
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z5DFFMAPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, %fd14, %fd13;
    add.f64         %fd17, %fd15, 10.0;

    mov.u32         %r1, %clock;
    fma.rn.f64      %fd19, %fd17, %fd13, 5.0;
    fma.rn.f64      %fd20, %fd19, %fd13, 6.0;
    //fma.rn.f64      %fd21, %fd20, %fd17, 7.0;
    //fma.rn.f64      %fd22, %fd21, %fd15, 2.0;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r9, %fd20;
    st.global.u32   [%rd4 + 8], %r9;
    
    ret;
}


//--------------------------DFDiv--------------------------//
 
        // .globl	_Z5DFDivPi
.visible .entry _Z5DFDivPi(
        .param .u64 _Z5DFDivPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z5DFDivPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, %fd14, %fd13;
    add.f64         %fd17, %fd15, 10.0;

    mov.u32         %r1, %clock;
    div.rn.f64      %fd19, %fd17, %fd13;
    div.rn.f64      %fd20, %fd19, %fd13;
    //div.rn.f64      %fd21, %fd20, %fd17;
    //div.rn.f64      %fd22, %fd21, %fd15;
    mov.u32         %r2, %clock;
    sub.s32         %r6, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r6;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r9, %fd20;
    st.global.u32   [%rd4 + 8], %r9;
    
    ret;
}


//--------------------------HFAdd--------------------------//
 
        // .globl	_Z5HFAddPi
.visible .entry _Z5HFAddPi(
        .param .u64 _Z5HFAddPi_param_0
)
{ 
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;
    .reg .b16   %rs<100>;


    ld.param.u64    %rd1, [_Z5HFAddPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    add.f16         %rs5, 12.0, 1.0;
    add.f16         %rs7, 10.0, 11.0;

    mov.u32         %r1, %clock;
    add.f16         %rs9, %rs7, %rs5;
    add.f16         %rs10, %rs9, %rs7;
    add.f16         %rs11, %rs10, 5.0; 
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;

    cvt.f32.f16      %f9, %rs9;
    cvt.rzi.s32.f32  %r9, %f9;
    st.global.u32   [%rd4 + 8], %r9;
    cvt.f32.f16      %f10, %rs10;
    cvt.rzi.s32.f32  %r10, %f10;
    st.global.u32   [%rd4 + 12], %r10;
    cvt.f32.f16      %f11, %rs11;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 16], %r11;

    ret;
}


//--------------------------HFMul--------------------------//
 
        // .globl	_Z5HFMulPi
.visible .entry _Z5HFMulPi(
        .param .u64 _Z5HFMulPi_param_0
)
{ 
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;
    .reg .b16   %rs<100>;

    ld.param.u64    %rd1, [_Z5HFMulPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    add.f16         %rs5, 12.0, 1.0;
    add.f16         %rs7, 10.0, 11.0;

    mov.u32         %r1, %clock;
    mul.rn.f16      %rs9, %rs7, %rs5;
    mul.rn.f16      %rs10, %rs9, %rs7;
    mul.rn.f16      %rs11, %rs10, 5.0; 
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.f32.f16      %f9, %rs9;
    cvt.rzi.s32.f32  %r9, %f9;
    st.global.u32   [%rd4 + 8], %r9;
    cvt.f32.f16      %f10, %rs10;
    cvt.rzi.s32.f32  %r10, %f10;
    st.global.u32   [%rd4 + 12], %r10;
    cvt.f32.f16      %f11, %rs11;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 16], %r11;

    ret;
}


//--------------------------HFFMa--------------------------//
 
        // .globl	_Z5HFFMaPi
.visible .entry _Z5HFFMaPi(
        .param .u64 _Z5HFFMaPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;
    .reg .b16   %rs<100>;

    ld.param.u64    %rd1, [_Z5HFFMaPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;

    add.f16         %rs5, 12.0, 1.0;
    add.f16         %rs7, 10.0, 11.0;

    mov.u32         %r1, %clock;
    fma.rn.f16      %rs9, %rs7, %rs5, 5.0;
    fma.rn.f16      %rs10, %rs9, %rs7, 6.0;
    fma.rn.f16      %rs11, %rs10, 5.0, 7.0; 
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.f32.f16      %f9, %rs9;
    cvt.rzi.s32.f32  %r9, %f9;
    st.global.u32   [%rd4 + 8], %r9;
    cvt.f32.f16      %f10, %rs10;
    cvt.rzi.s32.f32  %r10, %f10;
    st.global.u32   [%rd4 + 12], %r10;
    cvt.f32.f16      %f11, %rs11;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 16], %r11;

    ret;
}


//--------------------------Rcp--------------------------//
 
        // .globl	_Z3RcpPi
.visible .entry _Z3RcpPi(
        .param .u64 _Z3RcpPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z3RcpPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32         %r1, %clock;
    rcp.rn.f32      %f11, %f7;
    rcp.rn.f32      %f12, %f5;
    rcp.rn.f32      %f13, %f1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;
    
    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------FastRcp--------------------------//
 
        // .globl	_Z7FastRcpPi
.visible .entry _Z7FastRcpPi(
        .param .u64 _Z7FastRcpPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z7FastRcpPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32             %f5, 5.0, %f3;
    add.f32             %f7, %f5, 2.0;

    mov.u32             %r1, %clock;
    rcp.approx.f32      %f11, %f7;
    rcp.approx.f32      %f12, %f5;
    rcp.approx.f32      %f13, %f1;
    mov.u32             %r2, %clock;
    sub.s32             %r8, %r2, %r1;
    
    add.u32             %r7, 5, %r1;

    st.global.u32       [%rd4], %r8;
    st.global.u32       [%rd4 + 4], %r7;
    cvt.rzi.s32.f32     %r11, %f11;
    st.global.u32       [%rd4 + 8], %r11;
    cvt.rzi.s32.f32     %r12, %f12;
    st.global.u32       [%rd4 + 12], %r12;
    cvt.rzi.s32.f32     %r13, %f13;
    st.global.u32       [%rd4 + 16], %r13;

    ret;
}


//--------------------------DRcp--------------------------//
 
        // .globl	_Z4DRcpPi
.visible .entry _Z4DRcpPi(
        .param .u64 _Z4DRcpPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z4DRcpPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, 5.0, %fd13;
    add.f64         %fd17, %fd15, 2.0;

    mov.u32         %r1, %clock;
    rcp.rn.f64      %fd20, %fd17;
    rcp.rn.f64      %fd21, %fd15;
    //rcp.rn.f64      %fd22, %fd21;
    //rcp.rn.f64      %fd23, %fd22;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r20, %fd20;
    st.global.u32   [%rd4 + 8], %r20;
    cvt.rzi.s32.f64  %r21, %fd21;
    st.global.u32   [%rd4 + 12], %r21;
  
    ret;
}


//--------------------------Sqrt--------------------------//
 
        // .globl	_Z4SqrtPi
.visible .entry _Z4SqrtPi(
        .param .u64 _Z4SqrtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z4SqrtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32         %r1, %clock;
    sqrt.rn.f32     %f11, %f7;
    sqrt.rn.f32     %f12, %f5;
    sqrt.rn.f32     %f13, %f1;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------DSqrt--------------------------//
 
       // .globl	_Z5DSqrtPi
.visible .entry _Z5DSqrtPi(
        .param .u64 _Z5DSqrtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z5DSqrtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, 5.0, %fd13;
    add.f64         %fd17, %fd15, 2.0;

    mov.u32         %r1, %clock;
    sqrt.rn.f64     %fd20, %fd17;
    sqrt.rn.f64     %fd21, %fd15;
    //sqrt.rn.f64     %fd22, %fd21;
    //sqrt.rn.f64     %fd23, %fd22;
    mov.u32         %r2, %clock;
    sub.s32         %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r20, %fd20;
    st.global.u32   [%rd4 + 8], %r20;
    cvt.rzi.s32.f64  %r21, %fd21;
    st.global.u32   [%rd4 + 12], %r21;
  
    ret;
}



//--------------------------FastSqrt--------------------------//
 
        // .globl	_Z8FastSqrtPi
.visible .entry _Z8FastSqrtPi(
        .param .u64 _Z8FastSqrtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z8FastSqrtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32             %r1, %clock;
    sqrt.approx.f32     %f11, %f7;
    sqrt.approx.f32     %f12, %f5;
    sqrt.approx.f32     %f13, %f1;
    mov.u32             %r2, %clock;
    sub.s32             %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}



//--------------------------Rsqrt--------------------------//
 
        // .globl	_Z5RsqrtPi
.visible .entry _Z5RsqrtPi(
        .param .u64 _Z5RsqrtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z5RsqrtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32             %r1, %clock;
    rsqrt.approx.f32    %f11, %f7;
    rsqrt.approx.f32    %f12, %f5;
    rsqrt.approx.f32    %f13, %f1;
    mov.u32             %r2, %clock;
    sub.s32             %r8, %r2, %r1;

    add.u32         %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 8], %r11;
    cvt.rzi.s32.f32  %r12, %f12;
    st.global.u32   [%rd4 + 12], %r12;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 16], %r13;

    ret;
}


//--------------------------FastDRsqrt--------------------------//
 
        // .globl	_Z10FastDRsqrtPi
.visible .entry _Z10FastDRsqrtPi(
        .param .u64 _Z10FastDRsqrtPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f64   %fd<100>;

    ld.param.u64    %rd1, [_Z10FastDRsqrtPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f64         %fd15, 5.0, %fd13;
    add.f64         %fd17, %fd15, 2.0;

    mov.u32                   %r1, %clock;
    rsqrt.approx.ftz.f64      %fd20, %fd17;
    rsqrt.approx.ftz.f64      %fd21, %fd15;
    rsqrt.approx.ftz.f64      %fd22, %fd21;
    rsqrt.approx.ftz.f64      %fd23, %fd22;
    mov.u32                   %r2, %clock;
    sub.s32                   %r8, %r2, %r1;

    add.u32          %r7, 5, %r1;

    st.global.u32    [%rd4], %r8;
    st.global.u32    [%rd4 + 4], %r7;
    cvt.rzi.s32.f64  %r20, %fd20;
    st.global.u32    [%rd4 + 8], %r20;
    cvt.rzi.s32.f64  %r23, %fd23;
    st.global.u32    [%rd4 + 12], %r23;

    ret;
}


//--------------------------Sin--------------------------//
 
        // .globl	_Z3SinPi
.visible .entry _Z3SinPi(
        .param .u64 _Z3SinPi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z3SinPi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32             %r1, %clock;
    sin.approx.f32      %f11, %f7;
    mov.u32             %r2, %clock;
    sub.s32             %r8, %r2, %r1;

    add.u32          %r7, 5, %r1;

    st.global.u32    [%rd4], %r8;
    st.global.u32    [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32    [%rd4 + 8], %r11;

    ret;
}


//--------------------------Ex2--------------------------//
 
        // .globl	_Z3Ex2Pi
.visible .entry _Z3Ex2Pi(
        .param .u64 _Z3Ex2Pi_param_0
)
{
    .reg .b32   %r<100>;
    .reg .b64   %rd<100>;
    .reg .f32   %f<100>;

    ld.param.u64    %rd1, [_Z3Ex2Pi_param_0];
    cvta.to.global.u64  %rd4, %rd1;
    
    add.f32         %f5, 5.0, %f3;
    add.f32         %f7, %f5, 2.0;

    mov.u32             %r1, %clock;
    ex2.approx.f32      %f11, %f7;
    ex2.approx.f32      %f12, %f5;
    ex2.approx.f32      %f13, %f12;
    mov.u32             %r2, %clock;
    sub.s32             %r8, %r2, %r1;

    add.u32          %r7, 5, %r1;

    st.global.u32   [%rd4], %r8;
    st.global.u32   [%rd4 + 4], %r7;
    cvt.rzi.s32.f32  %r11, %f11;
    st.global.u32   [%rd4 + 12], %r11;
    cvt.rzi.s32.f32  %r13, %f13;
    st.global.u32   [%rd4 + 12], %r13;

    ret;
}